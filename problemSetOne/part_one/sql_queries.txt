/* 
 * CSCI E-66: Problem Set 1, SQL Programming Problems
 *
 * Put your name and email address below:
 *     name: Brad Wagoner
 *     email: bradwagoner1@gmail.com
 */

/**********************************************************
 * REMEMBER: You should include only the SQL commands,
 * *NOT* the results that they produce.
 **********************************************************/

/*
 * sample query: Find the names and runtimes of all 
 * movies from the year 2000.
 */

SELECT name, runtime
  FROM Movie
 WHERE year = 2000;


/*
 * Problem 5. Put your SQL command for this problem below.	
 */
SELECT name 'name of movie', year 'year of movie'
  FROM Movie
 WHERE name LIKE '%Lady%';


/*
 * Problem 6. Put your SQL command for this problem below.	
 */
SELECT COUNT(*)
  FROM Oscar
  JOIN Person
    ON Oscar.person_id = Person.id
 WHERE Person.pob LIKE '%UK';


/*
 * Problem 7. Put your SQL command for this problem below.	
 */
SELECT Oscar.year, Oscar.type, Movie.name
  FROM Oscar
  JOIN Person
    ON Oscar.person_id = Person.id
  JOIN Movie 
    ON Oscar.movie_id = Movie.id
 WHERE Person.name = 'Meryl Streep';


/*
 * Problem 8. Put your SQL command for this problem below.	
 */
SELECT Movie.name, Movie.year
  FROM Movie
 WHERE Movie.name = 'Good Will Hunting'
    OR Movie.name = 'Mystic River';


/*
 * Problem 9. Put your SQL command for this problem below.	
 */
SELECT outerMovie.name, outerMovie.year
  FROM Movie outerMovie
 WHERE outerMovie.rating = 'R'
   AND NOT EXISTS (
   SELECT 1
     FROM Movie innerMovie
	WHERE outerMovie.rating = innerMovie.rating
	  AND outerMovie.year > innerMovie.year
 );

/*
-- Alternate solution to #9 that more closely follows the logic you would use to solve using Relational Algebra
-- I'm guessing here a bit - and a better explanation would be _awesome_ - but, because the "Movie.year =" sub-select is required to compare all rows in the MIN function
--    and the NOT EXISTS (I'm guessing here) is able to use some logrithmic function to search results, the NOT EXISTS subselect allows the first query to run in a fraction
--    of the time the other query does.
SELECT Movie.name, Movie.year
  FROM Movie
 WHERE Movie.rating = 'R'
   AND Movie.year = (
	SELECT MIN(oldestMovie.year)
	  FROM Movie oldestMovie
	 WHERE oldestMovie.rating = Movie.rating
 );
*/


/*
 * Problem 10. Put your SQL command for this problem below.	
 */
SELECT Movie.rating, Count(*) occurrences, MIN(Movie.earnings_rank) 'most profitable ranking'
  FROM Movie
 WHERE Movie.earnings_rank IS NOT NULL
 GROUP BY Movie.rating
 ORDER BY occurrences DESC;


/*
 * Problem 11. Put your SQL command for this problem below.	
 */
SELECT Person.pob, COUNT(*) number_of_people
  FROM Person
 WHERE Person.pob IS NOT NULL
 GROUP BY Person.pob
HAVING number_of_people >= 50;


/*
 * Problem 12. Put your SQL command for this problem below.	
 */
SELECT COUNT(DISTINCT(Actor.actor_id))
  FROM Actor actor
 WHERE Actor.actor_id NOT IN (
     SELECT sub_actor.actor_id
	   FROM Actor sub_actor
	   JOIN Movie
         ON sub_actor.movie_id = Movie.id
	  WHERE sub_actor.movie_id = Movie.id
	    AND Movie.year >= 2010
   );
   
   
/*
 * Problem 13. Put your SQL command for this problem below.	
 */
SELECT Person.name, COUNT(Oscar.type) number_of_oscars
  FROM Person
  LEFT OUTER JOIN Oscar
    ON Oscar.person_id = Person.id
 WHERE Person.pob LIKE '%Mexico'
 GROUP BY Person.id;


/*
 * Problem 14. Put your SQL command for this problem below.	
 */
SELECT Oscar.type, AVG(Movie.runtime) average_runtime
  FROM Oscar
  JOIN Movie
    ON Oscar.movie_id = Movie.id
 GROUP BY Oscar.type;


/*
 * Problem 15. Put your SQL command for this problem below.	
 */
SELECT * 
  FROM (
	SELECT shortest_movie.name, shortest_movie.runtime
	  FROM Movie shortest_movie
     WHERE NOT EXISTS (
	   SELECT 1
	     FROM Movie sub_shortest_movie
		WHERE sub_shortest_movie.runtime < shortest_movie.runtime
     ) 
  
  UNION
	
    SELECT longest_movie.name, longest_movie.runtime
      FROM Movie longest_movie
     WHERE NOT EXISTS (
        SELECT 1
          FROM Movie sub_longest_movie
         WHERE sub_longest_movie.runtime > longest_movie.runtime
     )
);

/*
-- Funny - executing the sub selects this way causes the query to run in 1ms as opposed to 7ish for the query above.
-- Is that just because the number of rows for the MIN is small enough it is more efficient here but wouldn't scale over a larger dataset?
 SELECT longest_movie.name, longest_movie.runtime
   FROM Movie longest_movie
  WHERE longest_movie.runtime = (
	SELECT MAX(sub_longest_movie.runtime)
	  FROM Movie sub_longest_movie
  )
  
  UNION
  
 SELECT shortest_movie.name, shortest_movie.runtime
   FROM Movie shortest_movie
  WHERE shortest_movie.runtime = (
	SELECT MIN(sub_shortest_movie.runtime)
	  FROM Movie sub_shortest_movie
  );


 */


/*
 * Problem 16. Put your SQL command for this problem below.	
 */
UPDATE Movie
   SET rating = 'PG-13'
 WHERE Movie.name = 'Indiana Jones and the Temple of Doom';


/*
 * Problem 17 (required for grad-credit students; optional for others). 
 * Put your SQL command for this problem below.	
 */
SELECT COUNT(*)
  FROM (
    SELECT 1
      FROM Actor
      JOIN Director
        ON Actor.movie_id = Director.movie_id
     GROUP BY Actor.actor_id, Director.director_id
     HAVING COUNT(*) >= 2
);


/*
 * Problem 18 (required for grad-credit students; optional for others). 
 * Put your SQL command(s) for this problem below.	
 */
 SELECT Movie.name, Oscar.type
  FROM Movie
  JOIN Director 
    ON Movie.id = Director.movie_id
  JOIN Person
    ON Director.director_id= Person.id
  LEFT JOIN Oscar
    ON Movie.id = Oscar.movie_id
 WHERE Person.name = 'Steven Spielberg'
 GROUP BY Movie.id, Oscar.type;
 
/*
-- Something cool I noticed in this query: the order of the left join changed the execution time of the query from 15ms to 5ms.
-- The above query runs in 5ms, the bottom one runs in 15
SELECT Movie.name, Oscar.type
  FROM Movie
  LEFT JOIN Oscar
    ON Movie.id = Oscar.movie_id
  JOIN Director
    ON Movie.id = Director.movie_id
  JOIN Person
    ON Director.director_id = Person.id
 WHERE Person.name = 'Steven Spielberg';

 */
 
 /*
  * Actors with 2 degrees of separation
  */
  
-- A temp table of Actors who acted in movies w/KB
DROP TABLE IF EXISTS first_degree_actors;
CREATE TEMPORARY TABLE first_degree_actors AS
SELECT Actor.*
  FROM Actor kevin_bacon
  JOIN Person
    ON kevin_bacon.actor_id = Person.id
  JOIN Actor
    ON kevin_bacon.movie_id = actor.movie_id
 WHERE Person.name = 'Kevin Bacon'
   AND Actor.actor_id != kevin_bacon.actor_id;
   
-- A temp table of movies first_degree_actors were in.
DROP TABLE IF EXISTS second_degree_movies;
CREATE TEMPORARY TABLE second_degree_movies AS
SELECT Movie.*
  FROM Movie
  JOIN Actor
    ON Movie.id = Actor.movie_id
  JOIN first_degree_actors
    ON Actor.actor_id = first_degree_actors.actor_id
 GROUP BY Movie.id;

-- The actors who are in second degree movies.
SELECT Person.name
  FROM Actor
  JOIN second_degree_movies
    ON Actor.movie_id = second_degree_movies.id
  JOIN Person
    ON Actor.actor_id = Person.id
 WHERE NOT EXISTS (
	SELECT 1
	  FROM first_degree_actors
	 WHERE first_degree_actors.actor_id = Actor.actor_id
 )
 GROUP BY Person.id
 ORDER BY Person.name;